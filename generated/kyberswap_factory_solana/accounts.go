// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package kyberswap_factory_solana

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Factory struct {
	NumPools      uint64
	FeeTo         ag_solanago.PublicKey
	FeeBps        uint64
	FeeToSetter   ag_solanago.PublicKey
	NumFeeOptions uint16
	FeeOptions    [16]uint16
}

var FactoryDiscriminator = [8]byte{159, 68, 192, 61, 48, 249, 216, 202}

func (obj Factory) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FactoryDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `NumPools` param:
	err = encoder.Encode(obj.NumPools)
	if err != nil {
		return err
	}
	// Serialize `FeeTo` param:
	err = encoder.Encode(obj.FeeTo)
	if err != nil {
		return err
	}
	// Serialize `FeeBps` param:
	err = encoder.Encode(obj.FeeBps)
	if err != nil {
		return err
	}
	// Serialize `FeeToSetter` param:
	err = encoder.Encode(obj.FeeToSetter)
	if err != nil {
		return err
	}
	// Serialize `NumFeeOptions` param:
	err = encoder.Encode(obj.NumFeeOptions)
	if err != nil {
		return err
	}
	// Serialize `FeeOptions` param:
	err = encoder.Encode(obj.FeeOptions)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Factory) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FactoryDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[159 68 192 61 48 249 216 202]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `NumPools`:
	err = decoder.Decode(&obj.NumPools)
	if err != nil {
		return err
	}
	// Deserialize `FeeTo`:
	err = decoder.Decode(&obj.FeeTo)
	if err != nil {
		return err
	}
	// Deserialize `FeeBps`:
	err = decoder.Decode(&obj.FeeBps)
	if err != nil {
		return err
	}
	// Deserialize `FeeToSetter`:
	err = decoder.Decode(&obj.FeeToSetter)
	if err != nil {
		return err
	}
	// Deserialize `NumFeeOptions`:
	err = decoder.Decode(&obj.NumFeeOptions)
	if err != nil {
		return err
	}
	// Deserialize `FeeOptions`:
	err = decoder.Decode(&obj.FeeOptions)
	if err != nil {
		return err
	}
	return nil
}

type TokenPair struct {
	NumAmplifiedPools uint64
}

var TokenPairDiscriminator = [8]byte{17, 214, 45, 176, 229, 149, 197, 71}

func (obj TokenPair) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TokenPairDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `NumAmplifiedPools` param:
	err = encoder.Encode(obj.NumAmplifiedPools)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenPair) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TokenPairDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[17 214 45 176 229 149 197 71]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `NumAmplifiedPools`:
	err = decoder.Decode(&obj.NumAmplifiedPools)
	if err != nil {
		return err
	}
	return nil
}
