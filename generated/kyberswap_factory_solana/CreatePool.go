// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package kyberswap_factory_solana

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreatePool is the `createPool` instruction.
type CreatePool struct {
	AmplificationFactor *uint64
	FeeBps              *uint16

	// [0] = [WRITE, SIGNER] payer
	//
	// [1] = [WRITE] factoryState
	//
	// [2] = [WRITE] tokenPair
	//
	// [3] = [WRITE] poolState
	//
	// [4] = [] poolAuthority
	//
	// [5] = [] token0Mint
	//
	// [6] = [] token1Mint
	//
	// [7] = [WRITE] poolBalanceToken0
	//
	// [8] = [WRITE] poolBalanceToken1
	//
	// [9] = [] incinerator
	//
	// [10] = [WRITE] poolMint
	//
	// [11] = [WRITE] poolBalanceLiquidity
	//
	// [12] = [WRITE] poolBalanceLockedLiquidity
	//
	// [13] = [WRITE] factoryBalanceFeeTo
	//
	// [14] = [] factoryFeeTo
	//
	// [15] = [] poolProgram
	//
	// [16] = [] tokenProgram
	//
	// [17] = [] associatedTokenProgram
	//
	// [18] = [] systemProgram
	//
	// [19] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreatePoolInstructionBuilder creates a new `CreatePool` instruction builder.
func NewCreatePoolInstructionBuilder() *CreatePool {
	nd := &CreatePool{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 20),
	}
	return nd
}

// SetAmplificationFactor sets the "amplificationFactor" parameter.
func (inst *CreatePool) SetAmplificationFactor(amplificationFactor uint64) *CreatePool {
	inst.AmplificationFactor = &amplificationFactor
	return inst
}

// SetFeeBps sets the "feeBps" parameter.
func (inst *CreatePool) SetFeeBps(feeBps uint16) *CreatePool {
	inst.FeeBps = &feeBps
	return inst
}

// SetPayerAccount sets the "payer" account.
func (inst *CreatePool) SetPayerAccount(payer ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *CreatePool) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetFactoryStateAccount sets the "factoryState" account.
func (inst *CreatePool) SetFactoryStateAccount(factoryState ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(factoryState).WRITE()
	return inst
}

// GetFactoryStateAccount gets the "factoryState" account.
func (inst *CreatePool) GetFactoryStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenPairAccount sets the "tokenPair" account.
func (inst *CreatePool) SetTokenPairAccount(tokenPair ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenPair).WRITE()
	return inst
}

// GetTokenPairAccount gets the "tokenPair" account.
func (inst *CreatePool) GetTokenPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPoolStateAccount sets the "poolState" account.
func (inst *CreatePool) SetPoolStateAccount(poolState ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

// GetPoolStateAccount gets the "poolState" account.
func (inst *CreatePool) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPoolAuthorityAccount sets the "poolAuthority" account.
func (inst *CreatePool) SetPoolAuthorityAccount(poolAuthority ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(poolAuthority)
	return inst
}

// GetPoolAuthorityAccount gets the "poolAuthority" account.
func (inst *CreatePool) GetPoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetToken0MintAccount sets the "token0Mint" account.
func (inst *CreatePool) SetToken0MintAccount(token0Mint ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(token0Mint)
	return inst
}

// GetToken0MintAccount gets the "token0Mint" account.
func (inst *CreatePool) GetToken0MintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetToken1MintAccount sets the "token1Mint" account.
func (inst *CreatePool) SetToken1MintAccount(token1Mint ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(token1Mint)
	return inst
}

// GetToken1MintAccount gets the "token1Mint" account.
func (inst *CreatePool) GetToken1MintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetPoolBalanceToken0Account sets the "poolBalanceToken0" account.
func (inst *CreatePool) SetPoolBalanceToken0Account(poolBalanceToken0 ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(poolBalanceToken0).WRITE()
	return inst
}

// GetPoolBalanceToken0Account gets the "poolBalanceToken0" account.
func (inst *CreatePool) GetPoolBalanceToken0Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetPoolBalanceToken1Account sets the "poolBalanceToken1" account.
func (inst *CreatePool) SetPoolBalanceToken1Account(poolBalanceToken1 ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(poolBalanceToken1).WRITE()
	return inst
}

// GetPoolBalanceToken1Account gets the "poolBalanceToken1" account.
func (inst *CreatePool) GetPoolBalanceToken1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetIncineratorAccount sets the "incinerator" account.
func (inst *CreatePool) SetIncineratorAccount(incinerator ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(incinerator)
	return inst
}

// GetIncineratorAccount gets the "incinerator" account.
func (inst *CreatePool) GetIncineratorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetPoolMintAccount sets the "poolMint" account.
func (inst *CreatePool) SetPoolMintAccount(poolMint ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(poolMint).WRITE()
	return inst
}

// GetPoolMintAccount gets the "poolMint" account.
func (inst *CreatePool) GetPoolMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetPoolBalanceLiquidityAccount sets the "poolBalanceLiquidity" account.
func (inst *CreatePool) SetPoolBalanceLiquidityAccount(poolBalanceLiquidity ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(poolBalanceLiquidity).WRITE()
	return inst
}

// GetPoolBalanceLiquidityAccount gets the "poolBalanceLiquidity" account.
func (inst *CreatePool) GetPoolBalanceLiquidityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetPoolBalanceLockedLiquidityAccount sets the "poolBalanceLockedLiquidity" account.
func (inst *CreatePool) SetPoolBalanceLockedLiquidityAccount(poolBalanceLockedLiquidity ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(poolBalanceLockedLiquidity).WRITE()
	return inst
}

// GetPoolBalanceLockedLiquidityAccount gets the "poolBalanceLockedLiquidity" account.
func (inst *CreatePool) GetPoolBalanceLockedLiquidityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetFactoryBalanceFeeToAccount sets the "factoryBalanceFeeTo" account.
func (inst *CreatePool) SetFactoryBalanceFeeToAccount(factoryBalanceFeeTo ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(factoryBalanceFeeTo).WRITE()
	return inst
}

// GetFactoryBalanceFeeToAccount gets the "factoryBalanceFeeTo" account.
func (inst *CreatePool) GetFactoryBalanceFeeToAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetFactoryFeeToAccount sets the "factoryFeeTo" account.
func (inst *CreatePool) SetFactoryFeeToAccount(factoryFeeTo ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(factoryFeeTo)
	return inst
}

// GetFactoryFeeToAccount gets the "factoryFeeTo" account.
func (inst *CreatePool) GetFactoryFeeToAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetPoolProgramAccount sets the "poolProgram" account.
func (inst *CreatePool) SetPoolProgramAccount(poolProgram ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(poolProgram)
	return inst
}

// GetPoolProgramAccount gets the "poolProgram" account.
func (inst *CreatePool) GetPoolProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CreatePool) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CreatePool) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *CreatePool) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *CreatePool) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreatePool) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreatePool) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetRentAccount sets the "rent" account.
func (inst *CreatePool) SetRentAccount(rent ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *CreatePool) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

func (inst CreatePool) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreatePool,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreatePool) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreatePool) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.AmplificationFactor == nil {
			return errors.New("AmplificationFactor parameter is not set")
		}
		if inst.FeeBps == nil {
			return errors.New("FeeBps parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.FactoryState is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenPair is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.PoolAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Token0Mint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Token1Mint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.PoolBalanceToken0 is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.PoolBalanceToken1 is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Incinerator is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.PoolMint is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.PoolBalanceLiquidity is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.PoolBalanceLockedLiquidity is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.FactoryBalanceFeeTo is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.FactoryFeeTo is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.PoolProgram is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *CreatePool) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreatePool")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("AmplificationFactor", *inst.AmplificationFactor))
						paramsBranch.Child(ag_format.Param("             FeeBps", *inst.FeeBps))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=20]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                     payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              factoryState", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                 tokenPair", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                 poolState", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("             poolAuthority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                token0Mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                token1Mint", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("         poolBalanceToken0", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("         poolBalanceToken1", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("               incinerator", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                  poolMint", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("      poolBalanceLiquidity", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("poolBalanceLockedLiquidity", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("       factoryBalanceFeeTo", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("              factoryFeeTo", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("               poolProgram", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("              tokenProgram", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("    associatedTokenProgram", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("             systemProgram", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("                      rent", inst.AccountMetaSlice.Get(19)))
					})
				})
		})
}

func (obj CreatePool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmplificationFactor` param:
	err = encoder.Encode(obj.AmplificationFactor)
	if err != nil {
		return err
	}
	// Serialize `FeeBps` param:
	err = encoder.Encode(obj.FeeBps)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreatePool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmplificationFactor`:
	err = decoder.Decode(&obj.AmplificationFactor)
	if err != nil {
		return err
	}
	// Deserialize `FeeBps`:
	err = decoder.Decode(&obj.FeeBps)
	if err != nil {
		return err
	}
	return nil
}

// NewCreatePoolInstruction declares a new CreatePool instruction with the provided parameters and accounts.
func NewCreatePoolInstruction(
	// Parameters:
	amplificationFactor uint64,
	feeBps uint16,
	// Accounts:
	payer ag_solanago.PublicKey,
	factoryState ag_solanago.PublicKey,
	tokenPair ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	poolAuthority ag_solanago.PublicKey,
	token0Mint ag_solanago.PublicKey,
	token1Mint ag_solanago.PublicKey,
	poolBalanceToken0 ag_solanago.PublicKey,
	poolBalanceToken1 ag_solanago.PublicKey,
	incinerator ag_solanago.PublicKey,
	poolMint ag_solanago.PublicKey,
	poolBalanceLiquidity ag_solanago.PublicKey,
	poolBalanceLockedLiquidity ag_solanago.PublicKey,
	factoryBalanceFeeTo ag_solanago.PublicKey,
	factoryFeeTo ag_solanago.PublicKey,
	poolProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *CreatePool {
	return NewCreatePoolInstructionBuilder().
		SetAmplificationFactor(amplificationFactor).
		SetFeeBps(feeBps).
		SetPayerAccount(payer).
		SetFactoryStateAccount(factoryState).
		SetTokenPairAccount(tokenPair).
		SetPoolStateAccount(poolState).
		SetPoolAuthorityAccount(poolAuthority).
		SetToken0MintAccount(token0Mint).
		SetToken1MintAccount(token1Mint).
		SetPoolBalanceToken0Account(poolBalanceToken0).
		SetPoolBalanceToken1Account(poolBalanceToken1).
		SetIncineratorAccount(incinerator).
		SetPoolMintAccount(poolMint).
		SetPoolBalanceLiquidityAccount(poolBalanceLiquidity).
		SetPoolBalanceLockedLiquidityAccount(poolBalanceLockedLiquidity).
		SetFactoryBalanceFeeToAccount(factoryBalanceFeeTo).
		SetFactoryFeeToAccount(factoryFeeTo).
		SetPoolProgramAccount(poolProgram).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}
