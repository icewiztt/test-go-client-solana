// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package kyberswap_router_solana

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "KyberswapRouterSolana"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_Initialize = ag_binary.TypeID([8]byte{175, 175, 109, 31, 13, 152, 155, 237})

	Instruction_AddLiquidity = ag_binary.TypeID([8]byte{181, 157, 89, 67, 143, 182, 52, 72})

	Instruction_AddLiquiditySol = ag_binary.TypeID([8]byte{95, 236, 49, 169, 222, 69, 64, 43})

	Instruction_PrepareForSwapExactTokensForTokens = ag_binary.TypeID([8]byte{172, 196, 135, 21, 112, 6, 100, 160})

	Instruction_PrepareForSwapExactSolForTokens = ag_binary.TypeID([8]byte{24, 107, 30, 231, 191, 241, 65, 18})

	Instruction_PrepareForSwapSolForExactTokens = ag_binary.TypeID([8]byte{229, 245, 84, 110, 28, 119, 26, 109})

	Instruction_PrepareForSwapTokensForExactTokens = ag_binary.TypeID([8]byte{219, 143, 169, 122, 66, 3, 40, 130})

	Instruction_SwapToSol = ag_binary.TypeID([8]byte{18, 60, 255, 39, 102, 128, 62, 140})

	Instruction_RemoveLiquidity = ag_binary.TypeID([8]byte{80, 85, 209, 72, 24, 206, 177, 108})

	Instruction_RemoveLiquiditySol = ag_binary.TypeID([8]byte{47, 252, 217, 211, 28, 129, 175, 139})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_Initialize:
		return "Initialize"
	case Instruction_AddLiquidity:
		return "AddLiquidity"
	case Instruction_AddLiquiditySol:
		return "AddLiquiditySol"
	case Instruction_PrepareForSwapExactTokensForTokens:
		return "PrepareForSwapExactTokensForTokens"
	case Instruction_PrepareForSwapExactSolForTokens:
		return "PrepareForSwapExactSolForTokens"
	case Instruction_PrepareForSwapSolForExactTokens:
		return "PrepareForSwapSolForExactTokens"
	case Instruction_PrepareForSwapTokensForExactTokens:
		return "PrepareForSwapTokensForExactTokens"
	case Instruction_SwapToSol:
		return "SwapToSol"
	case Instruction_RemoveLiquidity:
		return "RemoveLiquidity"
	case Instruction_RemoveLiquiditySol:
		return "RemoveLiquiditySol"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"initialize", (*Initialize)(nil),
		},
		{
			"add_liquidity", (*AddLiquidity)(nil),
		},
		{
			"add_liquidity_sol", (*AddLiquiditySol)(nil),
		},
		{
			"prepare_for_swap_exact_tokens_for_tokens", (*PrepareForSwapExactTokensForTokens)(nil),
		},
		{
			"prepare_for_swap_exact_sol_for_tokens", (*PrepareForSwapExactSolForTokens)(nil),
		},
		{
			"prepare_for_swap_sol_for_exact_tokens", (*PrepareForSwapSolForExactTokens)(nil),
		},
		{
			"prepare_for_swap_tokens_for_exact_tokens", (*PrepareForSwapTokensForExactTokens)(nil),
		},
		{
			"swap_to_sol", (*SwapToSol)(nil),
		},
		{
			"remove_liquidity", (*RemoveLiquidity)(nil),
		},
		{
			"remove_liquidity_sol", (*RemoveLiquiditySol)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
