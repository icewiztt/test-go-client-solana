// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package kyberswap_router_solana

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// PrepareForSwapExactSolForTokens is the `prepareForSwapExactSolForTokens` instruction.
type PrepareForSwapExactSolForTokens struct {
	AmountIn        *ag_binary.Uint128
	AmountOutMin    *ag_binary.Uint128
	TradeDirections *[]byte

	// [0] = [WRITE, SIGNER] user
	//
	// [1] = [] router
	//
	// [2] = [] poolProgram
	//
	// [3] = [WRITE] firstPoolBalanceWsol
	//
	// [4] = [] systemTokenProgram
	//
	// [5] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewPrepareForSwapExactSolForTokensInstructionBuilder creates a new `PrepareForSwapExactSolForTokens` instruction builder.
func NewPrepareForSwapExactSolForTokensInstructionBuilder() *PrepareForSwapExactSolForTokens {
	nd := &PrepareForSwapExactSolForTokens{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetAmountIn sets the "amountIn" parameter.
func (inst *PrepareForSwapExactSolForTokens) SetAmountIn(amountIn ag_binary.Uint128) *PrepareForSwapExactSolForTokens {
	inst.AmountIn = &amountIn
	return inst
}

// SetAmountOutMin sets the "amountOutMin" parameter.
func (inst *PrepareForSwapExactSolForTokens) SetAmountOutMin(amountOutMin ag_binary.Uint128) *PrepareForSwapExactSolForTokens {
	inst.AmountOutMin = &amountOutMin
	return inst
}

// SetTradeDirections sets the "tradeDirections" parameter.
func (inst *PrepareForSwapExactSolForTokens) SetTradeDirections(tradeDirections []byte) *PrepareForSwapExactSolForTokens {
	inst.TradeDirections = &tradeDirections
	return inst
}

// SetUserAccount sets the "user" account.
func (inst *PrepareForSwapExactSolForTokens) SetUserAccount(user ag_solanago.PublicKey) *PrepareForSwapExactSolForTokens {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *PrepareForSwapExactSolForTokens) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetRouterAccount sets the "router" account.
func (inst *PrepareForSwapExactSolForTokens) SetRouterAccount(router ag_solanago.PublicKey) *PrepareForSwapExactSolForTokens {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(router)
	return inst
}

// GetRouterAccount gets the "router" account.
func (inst *PrepareForSwapExactSolForTokens) GetRouterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPoolProgramAccount sets the "poolProgram" account.
func (inst *PrepareForSwapExactSolForTokens) SetPoolProgramAccount(poolProgram ag_solanago.PublicKey) *PrepareForSwapExactSolForTokens {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(poolProgram)
	return inst
}

// GetPoolProgramAccount gets the "poolProgram" account.
func (inst *PrepareForSwapExactSolForTokens) GetPoolProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetFirstPoolBalanceWsolAccount sets the "firstPoolBalanceWsol" account.
func (inst *PrepareForSwapExactSolForTokens) SetFirstPoolBalanceWsolAccount(firstPoolBalanceWsol ag_solanago.PublicKey) *PrepareForSwapExactSolForTokens {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(firstPoolBalanceWsol).WRITE()
	return inst
}

// GetFirstPoolBalanceWsolAccount gets the "firstPoolBalanceWsol" account.
func (inst *PrepareForSwapExactSolForTokens) GetFirstPoolBalanceWsolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemTokenProgramAccount sets the "systemTokenProgram" account.
func (inst *PrepareForSwapExactSolForTokens) SetSystemTokenProgramAccount(systemTokenProgram ag_solanago.PublicKey) *PrepareForSwapExactSolForTokens {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemTokenProgram)
	return inst
}

// GetSystemTokenProgramAccount gets the "systemTokenProgram" account.
func (inst *PrepareForSwapExactSolForTokens) GetSystemTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *PrepareForSwapExactSolForTokens) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *PrepareForSwapExactSolForTokens {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *PrepareForSwapExactSolForTokens) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst PrepareForSwapExactSolForTokens) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_PrepareForSwapExactSolForTokens,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst PrepareForSwapExactSolForTokens) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *PrepareForSwapExactSolForTokens) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.AmountIn == nil {
			return errors.New("AmountIn parameter is not set")
		}
		if inst.AmountOutMin == nil {
			return errors.New("AmountOutMin parameter is not set")
		}
		if inst.TradeDirections == nil {
			return errors.New("TradeDirections parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Router is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PoolProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.FirstPoolBalanceWsol is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemTokenProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *PrepareForSwapExactSolForTokens) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("PrepareForSwapExactSolForTokens")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("       AmountIn", *inst.AmountIn))
						paramsBranch.Child(ag_format.Param("   AmountOutMin", *inst.AmountOutMin))
						paramsBranch.Child(ag_format.Param("TradeDirections", *inst.TradeDirections))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                user", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              router", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         poolProgram", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("firstPoolBalanceWsol", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("  systemTokenProgram", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       systemProgram", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj PrepareForSwapExactSolForTokens) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountIn` param:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return err
	}
	// Serialize `AmountOutMin` param:
	err = encoder.Encode(obj.AmountOutMin)
	if err != nil {
		return err
	}
	// Serialize `TradeDirections` param:
	err = encoder.Encode(obj.TradeDirections)
	if err != nil {
		return err
	}
	return nil
}
func (obj *PrepareForSwapExactSolForTokens) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return err
	}
	// Deserialize `AmountOutMin`:
	err = decoder.Decode(&obj.AmountOutMin)
	if err != nil {
		return err
	}
	// Deserialize `TradeDirections`:
	err = decoder.Decode(&obj.TradeDirections)
	if err != nil {
		return err
	}
	return nil
}

// NewPrepareForSwapExactSolForTokensInstruction declares a new PrepareForSwapExactSolForTokens instruction with the provided parameters and accounts.
func NewPrepareForSwapExactSolForTokensInstruction(
	// Parameters:
	amountIn ag_binary.Uint128,
	amountOutMin ag_binary.Uint128,
	tradeDirections []byte,
	// Accounts:
	user ag_solanago.PublicKey,
	router ag_solanago.PublicKey,
	poolProgram ag_solanago.PublicKey,
	firstPoolBalanceWsol ag_solanago.PublicKey,
	systemTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *PrepareForSwapExactSolForTokens {
	return NewPrepareForSwapExactSolForTokensInstructionBuilder().
		SetAmountIn(amountIn).
		SetAmountOutMin(amountOutMin).
		SetTradeDirections(tradeDirections).
		SetUserAccount(user).
		SetRouterAccount(router).
		SetPoolProgramAccount(poolProgram).
		SetFirstPoolBalanceWsolAccount(firstPoolBalanceWsol).
		SetSystemTokenProgramAccount(systemTokenProgram).
		SetSystemProgramAccount(systemProgram)
}
