// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package kyberswap_router_solana

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AddLiquiditySol is the `addLiquiditySol` instruction.
type AddLiquiditySol struct {
	AmountTokenDesired *ag_binary.Uint128
	AmountSolDesired   *ag_binary.Uint128
	AmountTokenMin     *ag_binary.Uint128
	AmountSolMin       *ag_binary.Uint128

	// [0] = [] router
	//
	// [1] = [WRITE, SIGNER] user
	//
	// [2] = [] routerAuthority
	//
	// [3] = [WRITE] userBalanceToken
	//
	// [4] = [] poolProgram
	//
	// [5] = [] systemProgram
	//
	// [6] = [WRITE] poolState
	//
	// [7] = [] poolAuthority
	//
	// [8] = [WRITE] poolBalanceToken0
	//
	// [9] = [WRITE] poolBalanceToken1
	//
	// [10] = [WRITE] poolMintLiquidity
	//
	// [11] = [WRITE] poolBalanceLockedLiquidity
	//
	// [12] = [WRITE] userBalanceLiquidity
	//
	// [13] = [] factoryState
	//
	// [14] = [WRITE] factoryBalanceFeeTo
	//
	// [15] = [] systemTokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAddLiquiditySolInstructionBuilder creates a new `AddLiquiditySol` instruction builder.
func NewAddLiquiditySolInstructionBuilder() *AddLiquiditySol {
	nd := &AddLiquiditySol{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 16),
	}
	return nd
}

// SetAmountTokenDesired sets the "amountTokenDesired" parameter.
func (inst *AddLiquiditySol) SetAmountTokenDesired(amountTokenDesired ag_binary.Uint128) *AddLiquiditySol {
	inst.AmountTokenDesired = &amountTokenDesired
	return inst
}

// SetAmountSolDesired sets the "amountSolDesired" parameter.
func (inst *AddLiquiditySol) SetAmountSolDesired(amountSolDesired ag_binary.Uint128) *AddLiquiditySol {
	inst.AmountSolDesired = &amountSolDesired
	return inst
}

// SetAmountTokenMin sets the "amountTokenMin" parameter.
func (inst *AddLiquiditySol) SetAmountTokenMin(amountTokenMin ag_binary.Uint128) *AddLiquiditySol {
	inst.AmountTokenMin = &amountTokenMin
	return inst
}

// SetAmountSolMin sets the "amountSolMin" parameter.
func (inst *AddLiquiditySol) SetAmountSolMin(amountSolMin ag_binary.Uint128) *AddLiquiditySol {
	inst.AmountSolMin = &amountSolMin
	return inst
}

// SetRouterAccount sets the "router" account.
func (inst *AddLiquiditySol) SetRouterAccount(router ag_solanago.PublicKey) *AddLiquiditySol {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(router)
	return inst
}

// GetRouterAccount gets the "router" account.
func (inst *AddLiquiditySol) GetRouterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetUserAccount sets the "user" account.
func (inst *AddLiquiditySol) SetUserAccount(user ag_solanago.PublicKey) *AddLiquiditySol {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *AddLiquiditySol) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetRouterAuthorityAccount sets the "routerAuthority" account.
func (inst *AddLiquiditySol) SetRouterAuthorityAccount(routerAuthority ag_solanago.PublicKey) *AddLiquiditySol {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(routerAuthority)
	return inst
}

// GetRouterAuthorityAccount gets the "routerAuthority" account.
func (inst *AddLiquiditySol) GetRouterAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserBalanceTokenAccount sets the "userBalanceToken" account.
func (inst *AddLiquiditySol) SetUserBalanceTokenAccount(userBalanceToken ag_solanago.PublicKey) *AddLiquiditySol {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(userBalanceToken).WRITE()
	return inst
}

// GetUserBalanceTokenAccount gets the "userBalanceToken" account.
func (inst *AddLiquiditySol) GetUserBalanceTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPoolProgramAccount sets the "poolProgram" account.
func (inst *AddLiquiditySol) SetPoolProgramAccount(poolProgram ag_solanago.PublicKey) *AddLiquiditySol {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(poolProgram)
	return inst
}

// GetPoolProgramAccount gets the "poolProgram" account.
func (inst *AddLiquiditySol) GetPoolProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *AddLiquiditySol) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AddLiquiditySol {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *AddLiquiditySol) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPoolStateAccount sets the "poolState" account.
func (inst *AddLiquiditySol) SetPoolStateAccount(poolState ag_solanago.PublicKey) *AddLiquiditySol {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

// GetPoolStateAccount gets the "poolState" account.
func (inst *AddLiquiditySol) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetPoolAuthorityAccount sets the "poolAuthority" account.
func (inst *AddLiquiditySol) SetPoolAuthorityAccount(poolAuthority ag_solanago.PublicKey) *AddLiquiditySol {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(poolAuthority)
	return inst
}

// GetPoolAuthorityAccount gets the "poolAuthority" account.
func (inst *AddLiquiditySol) GetPoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetPoolBalanceToken0Account sets the "poolBalanceToken0" account.
func (inst *AddLiquiditySol) SetPoolBalanceToken0Account(poolBalanceToken0 ag_solanago.PublicKey) *AddLiquiditySol {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(poolBalanceToken0).WRITE()
	return inst
}

// GetPoolBalanceToken0Account gets the "poolBalanceToken0" account.
func (inst *AddLiquiditySol) GetPoolBalanceToken0Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetPoolBalanceToken1Account sets the "poolBalanceToken1" account.
func (inst *AddLiquiditySol) SetPoolBalanceToken1Account(poolBalanceToken1 ag_solanago.PublicKey) *AddLiquiditySol {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(poolBalanceToken1).WRITE()
	return inst
}

// GetPoolBalanceToken1Account gets the "poolBalanceToken1" account.
func (inst *AddLiquiditySol) GetPoolBalanceToken1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetPoolMintLiquidityAccount sets the "poolMintLiquidity" account.
func (inst *AddLiquiditySol) SetPoolMintLiquidityAccount(poolMintLiquidity ag_solanago.PublicKey) *AddLiquiditySol {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(poolMintLiquidity).WRITE()
	return inst
}

// GetPoolMintLiquidityAccount gets the "poolMintLiquidity" account.
func (inst *AddLiquiditySol) GetPoolMintLiquidityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetPoolBalanceLockedLiquidityAccount sets the "poolBalanceLockedLiquidity" account.
func (inst *AddLiquiditySol) SetPoolBalanceLockedLiquidityAccount(poolBalanceLockedLiquidity ag_solanago.PublicKey) *AddLiquiditySol {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(poolBalanceLockedLiquidity).WRITE()
	return inst
}

// GetPoolBalanceLockedLiquidityAccount gets the "poolBalanceLockedLiquidity" account.
func (inst *AddLiquiditySol) GetPoolBalanceLockedLiquidityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetUserBalanceLiquidityAccount sets the "userBalanceLiquidity" account.
func (inst *AddLiquiditySol) SetUserBalanceLiquidityAccount(userBalanceLiquidity ag_solanago.PublicKey) *AddLiquiditySol {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(userBalanceLiquidity).WRITE()
	return inst
}

// GetUserBalanceLiquidityAccount gets the "userBalanceLiquidity" account.
func (inst *AddLiquiditySol) GetUserBalanceLiquidityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetFactoryStateAccount sets the "factoryState" account.
func (inst *AddLiquiditySol) SetFactoryStateAccount(factoryState ag_solanago.PublicKey) *AddLiquiditySol {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(factoryState)
	return inst
}

// GetFactoryStateAccount gets the "factoryState" account.
func (inst *AddLiquiditySol) GetFactoryStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetFactoryBalanceFeeToAccount sets the "factoryBalanceFeeTo" account.
func (inst *AddLiquiditySol) SetFactoryBalanceFeeToAccount(factoryBalanceFeeTo ag_solanago.PublicKey) *AddLiquiditySol {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(factoryBalanceFeeTo).WRITE()
	return inst
}

// GetFactoryBalanceFeeToAccount gets the "factoryBalanceFeeTo" account.
func (inst *AddLiquiditySol) GetFactoryBalanceFeeToAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetSystemTokenProgramAccount sets the "systemTokenProgram" account.
func (inst *AddLiquiditySol) SetSystemTokenProgramAccount(systemTokenProgram ag_solanago.PublicKey) *AddLiquiditySol {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(systemTokenProgram)
	return inst
}

// GetSystemTokenProgramAccount gets the "systemTokenProgram" account.
func (inst *AddLiquiditySol) GetSystemTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

func (inst AddLiquiditySol) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AddLiquiditySol,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AddLiquiditySol) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AddLiquiditySol) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.AmountTokenDesired == nil {
			return errors.New("AmountTokenDesired parameter is not set")
		}
		if inst.AmountSolDesired == nil {
			return errors.New("AmountSolDesired parameter is not set")
		}
		if inst.AmountTokenMin == nil {
			return errors.New("AmountTokenMin parameter is not set")
		}
		if inst.AmountSolMin == nil {
			return errors.New("AmountSolMin parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Router is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.RouterAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UserBalanceToken is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.PoolProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.PoolAuthority is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.PoolBalanceToken0 is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.PoolBalanceToken1 is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.PoolMintLiquidity is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.PoolBalanceLockedLiquidity is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.UserBalanceLiquidity is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.FactoryState is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.FactoryBalanceFeeTo is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.SystemTokenProgram is not set")
		}
	}
	return nil
}

func (inst *AddLiquiditySol) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AddLiquiditySol")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("AmountTokenDesired", *inst.AmountTokenDesired))
						paramsBranch.Child(ag_format.Param("  AmountSolDesired", *inst.AmountSolDesired))
						paramsBranch.Child(ag_format.Param("    AmountTokenMin", *inst.AmountTokenMin))
						paramsBranch.Child(ag_format.Param("      AmountSolMin", *inst.AmountSolMin))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=16]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                    router", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                      user", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("           routerAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          userBalanceToken", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("               poolProgram", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("             systemProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                 poolState", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("             poolAuthority", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("         poolBalanceToken0", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("         poolBalanceToken1", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("         poolMintLiquidity", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("poolBalanceLockedLiquidity", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("      userBalanceLiquidity", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("              factoryState", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("       factoryBalanceFeeTo", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("        systemTokenProgram", inst.AccountMetaSlice.Get(15)))
					})
				})
		})
}

func (obj AddLiquiditySol) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountTokenDesired` param:
	err = encoder.Encode(obj.AmountTokenDesired)
	if err != nil {
		return err
	}
	// Serialize `AmountSolDesired` param:
	err = encoder.Encode(obj.AmountSolDesired)
	if err != nil {
		return err
	}
	// Serialize `AmountTokenMin` param:
	err = encoder.Encode(obj.AmountTokenMin)
	if err != nil {
		return err
	}
	// Serialize `AmountSolMin` param:
	err = encoder.Encode(obj.AmountSolMin)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AddLiquiditySol) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountTokenDesired`:
	err = decoder.Decode(&obj.AmountTokenDesired)
	if err != nil {
		return err
	}
	// Deserialize `AmountSolDesired`:
	err = decoder.Decode(&obj.AmountSolDesired)
	if err != nil {
		return err
	}
	// Deserialize `AmountTokenMin`:
	err = decoder.Decode(&obj.AmountTokenMin)
	if err != nil {
		return err
	}
	// Deserialize `AmountSolMin`:
	err = decoder.Decode(&obj.AmountSolMin)
	if err != nil {
		return err
	}
	return nil
}

// NewAddLiquiditySolInstruction declares a new AddLiquiditySol instruction with the provided parameters and accounts.
func NewAddLiquiditySolInstruction(
	// Parameters:
	amountTokenDesired ag_binary.Uint128,
	amountSolDesired ag_binary.Uint128,
	amountTokenMin ag_binary.Uint128,
	amountSolMin ag_binary.Uint128,
	// Accounts:
	router ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	routerAuthority ag_solanago.PublicKey,
	userBalanceToken ag_solanago.PublicKey,
	poolProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	poolAuthority ag_solanago.PublicKey,
	poolBalanceToken0 ag_solanago.PublicKey,
	poolBalanceToken1 ag_solanago.PublicKey,
	poolMintLiquidity ag_solanago.PublicKey,
	poolBalanceLockedLiquidity ag_solanago.PublicKey,
	userBalanceLiquidity ag_solanago.PublicKey,
	factoryState ag_solanago.PublicKey,
	factoryBalanceFeeTo ag_solanago.PublicKey,
	systemTokenProgram ag_solanago.PublicKey) *AddLiquiditySol {
	return NewAddLiquiditySolInstructionBuilder().
		SetAmountTokenDesired(amountTokenDesired).
		SetAmountSolDesired(amountSolDesired).
		SetAmountTokenMin(amountTokenMin).
		SetAmountSolMin(amountSolMin).
		SetRouterAccount(router).
		SetUserAccount(user).
		SetRouterAuthorityAccount(routerAuthority).
		SetUserBalanceTokenAccount(userBalanceToken).
		SetPoolProgramAccount(poolProgram).
		SetSystemProgramAccount(systemProgram).
		SetPoolStateAccount(poolState).
		SetPoolAuthorityAccount(poolAuthority).
		SetPoolBalanceToken0Account(poolBalanceToken0).
		SetPoolBalanceToken1Account(poolBalanceToken1).
		SetPoolMintLiquidityAccount(poolMintLiquidity).
		SetPoolBalanceLockedLiquidityAccount(poolBalanceLockedLiquidity).
		SetUserBalanceLiquidityAccount(userBalanceLiquidity).
		SetFactoryStateAccount(factoryState).
		SetFactoryBalanceFeeToAccount(factoryBalanceFeeTo).
		SetSystemTokenProgramAccount(systemTokenProgram)
}
