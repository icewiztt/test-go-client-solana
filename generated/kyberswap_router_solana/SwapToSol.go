// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package kyberswap_router_solana

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SwapToSol is the `swapToSol` instruction.
type SwapToSol struct {

	// [0] = [WRITE, SIGNER] user
	//
	// [1] = [] router
	//
	// [2] = [WRITE] routerAuthority
	//
	// [3] = [WRITE] routerBalanceWsol
	//
	// [4] = [] poolProgram
	//
	// [5] = [] wrappedSol
	//
	// [6] = [] systemProgram
	//
	// [7] = [] rent
	//
	// [8] = [WRITE] poolState
	//
	// [9] = [] poolAuthority
	//
	// [10] = [WRITE] poolBalanceToken0
	//
	// [11] = [WRITE] poolBalanceToken1
	//
	// [12] = [] systemTokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSwapToSolInstructionBuilder creates a new `SwapToSol` instruction builder.
func NewSwapToSolInstructionBuilder() *SwapToSol {
	nd := &SwapToSol{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 13),
	}
	return nd
}

// SetUserAccount sets the "user" account.
func (inst *SwapToSol) SetUserAccount(user ag_solanago.PublicKey) *SwapToSol {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *SwapToSol) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetRouterAccount sets the "router" account.
func (inst *SwapToSol) SetRouterAccount(router ag_solanago.PublicKey) *SwapToSol {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(router)
	return inst
}

// GetRouterAccount gets the "router" account.
func (inst *SwapToSol) GetRouterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetRouterAuthorityAccount sets the "routerAuthority" account.
func (inst *SwapToSol) SetRouterAuthorityAccount(routerAuthority ag_solanago.PublicKey) *SwapToSol {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(routerAuthority).WRITE()
	return inst
}

// GetRouterAuthorityAccount gets the "routerAuthority" account.
func (inst *SwapToSol) GetRouterAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetRouterBalanceWsolAccount sets the "routerBalanceWsol" account.
func (inst *SwapToSol) SetRouterBalanceWsolAccount(routerBalanceWsol ag_solanago.PublicKey) *SwapToSol {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(routerBalanceWsol).WRITE()
	return inst
}

// GetRouterBalanceWsolAccount gets the "routerBalanceWsol" account.
func (inst *SwapToSol) GetRouterBalanceWsolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPoolProgramAccount sets the "poolProgram" account.
func (inst *SwapToSol) SetPoolProgramAccount(poolProgram ag_solanago.PublicKey) *SwapToSol {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(poolProgram)
	return inst
}

// GetPoolProgramAccount gets the "poolProgram" account.
func (inst *SwapToSol) GetPoolProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetWrappedSolAccount sets the "wrappedSol" account.
func (inst *SwapToSol) SetWrappedSolAccount(wrappedSol ag_solanago.PublicKey) *SwapToSol {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(wrappedSol)
	return inst
}

// GetWrappedSolAccount gets the "wrappedSol" account.
func (inst *SwapToSol) GetWrappedSolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *SwapToSol) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *SwapToSol {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *SwapToSol) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetRentAccount sets the "rent" account.
func (inst *SwapToSol) SetRentAccount(rent ag_solanago.PublicKey) *SwapToSol {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *SwapToSol) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetPoolStateAccount sets the "poolState" account.
func (inst *SwapToSol) SetPoolStateAccount(poolState ag_solanago.PublicKey) *SwapToSol {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

// GetPoolStateAccount gets the "poolState" account.
func (inst *SwapToSol) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetPoolAuthorityAccount sets the "poolAuthority" account.
func (inst *SwapToSol) SetPoolAuthorityAccount(poolAuthority ag_solanago.PublicKey) *SwapToSol {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(poolAuthority)
	return inst
}

// GetPoolAuthorityAccount gets the "poolAuthority" account.
func (inst *SwapToSol) GetPoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetPoolBalanceToken0Account sets the "poolBalanceToken0" account.
func (inst *SwapToSol) SetPoolBalanceToken0Account(poolBalanceToken0 ag_solanago.PublicKey) *SwapToSol {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(poolBalanceToken0).WRITE()
	return inst
}

// GetPoolBalanceToken0Account gets the "poolBalanceToken0" account.
func (inst *SwapToSol) GetPoolBalanceToken0Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetPoolBalanceToken1Account sets the "poolBalanceToken1" account.
func (inst *SwapToSol) SetPoolBalanceToken1Account(poolBalanceToken1 ag_solanago.PublicKey) *SwapToSol {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(poolBalanceToken1).WRITE()
	return inst
}

// GetPoolBalanceToken1Account gets the "poolBalanceToken1" account.
func (inst *SwapToSol) GetPoolBalanceToken1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetSystemTokenProgramAccount sets the "systemTokenProgram" account.
func (inst *SwapToSol) SetSystemTokenProgramAccount(systemTokenProgram ag_solanago.PublicKey) *SwapToSol {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(systemTokenProgram)
	return inst
}

// GetSystemTokenProgramAccount gets the "systemTokenProgram" account.
func (inst *SwapToSol) GetSystemTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

func (inst SwapToSol) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SwapToSol,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SwapToSol) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SwapToSol) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Router is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.RouterAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.RouterBalanceWsol is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.PoolProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.WrappedSol is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.PoolAuthority is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.PoolBalanceToken0 is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.PoolBalanceToken1 is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SystemTokenProgram is not set")
		}
	}
	return nil
}

func (inst *SwapToSol) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SwapToSol")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=13]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("              user", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            router", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   routerAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta(" routerBalanceWsol", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       poolProgram", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        wrappedSol", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     systemProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("              rent", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("         poolState", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("     poolAuthority", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta(" poolBalanceToken0", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta(" poolBalanceToken1", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("systemTokenProgram", inst.AccountMetaSlice.Get(12)))
					})
				})
		})
}

func (obj SwapToSol) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *SwapToSol) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewSwapToSolInstruction declares a new SwapToSol instruction with the provided parameters and accounts.
func NewSwapToSolInstruction(
	// Accounts:
	user ag_solanago.PublicKey,
	router ag_solanago.PublicKey,
	routerAuthority ag_solanago.PublicKey,
	routerBalanceWsol ag_solanago.PublicKey,
	poolProgram ag_solanago.PublicKey,
	wrappedSol ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	poolAuthority ag_solanago.PublicKey,
	poolBalanceToken0 ag_solanago.PublicKey,
	poolBalanceToken1 ag_solanago.PublicKey,
	systemTokenProgram ag_solanago.PublicKey) *SwapToSol {
	return NewSwapToSolInstructionBuilder().
		SetUserAccount(user).
		SetRouterAccount(router).
		SetRouterAuthorityAccount(routerAuthority).
		SetRouterBalanceWsolAccount(routerBalanceWsol).
		SetPoolProgramAccount(poolProgram).
		SetWrappedSolAccount(wrappedSol).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent).
		SetPoolStateAccount(poolState).
		SetPoolAuthorityAccount(poolAuthority).
		SetPoolBalanceToken0Account(poolBalanceToken0).
		SetPoolBalanceToken1Account(poolBalanceToken1).
		SetSystemTokenProgramAccount(systemTokenProgram)
}
