// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package kyberswap_router_solana

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// RemoveLiquidity is the `removeLiquidity` instruction.
type RemoveLiquidity struct {
	Liquidity  *ag_binary.Uint128
	Amount0Min *ag_binary.Uint128
	Amount1Min *ag_binary.Uint128

	// [0] = [SIGNER] user
	//
	// [1] = [] router
	//
	// [2] = [] routerAuthority
	//
	// [3] = [WRITE] userBalanceLiquidity
	//
	// [4] = [] poolProgram
	//
	// [5] = [WRITE] poolState
	//
	// [6] = [] poolAuthority
	//
	// [7] = [WRITE] poolBalanceToken0
	//
	// [8] = [WRITE] poolBalanceToken1
	//
	// [9] = [WRITE] poolMintLiquidity
	//
	// [10] = [WRITE] poolBalanceLiquidity
	//
	// [11] = [WRITE] userBalanceToken0
	//
	// [12] = [WRITE] userBalanceToken1
	//
	// [13] = [] factoryState
	//
	// [14] = [WRITE] factoryBalanceFeeTo
	//
	// [15] = [] systemTokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRemoveLiquidityInstructionBuilder creates a new `RemoveLiquidity` instruction builder.
func NewRemoveLiquidityInstructionBuilder() *RemoveLiquidity {
	nd := &RemoveLiquidity{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 16),
	}
	return nd
}

// SetLiquidity sets the "liquidity" parameter.
func (inst *RemoveLiquidity) SetLiquidity(liquidity ag_binary.Uint128) *RemoveLiquidity {
	inst.Liquidity = &liquidity
	return inst
}

// SetAmount0Min sets the "amount0Min" parameter.
func (inst *RemoveLiquidity) SetAmount0Min(amount0Min ag_binary.Uint128) *RemoveLiquidity {
	inst.Amount0Min = &amount0Min
	return inst
}

// SetAmount1Min sets the "amount1Min" parameter.
func (inst *RemoveLiquidity) SetAmount1Min(amount1Min ag_binary.Uint128) *RemoveLiquidity {
	inst.Amount1Min = &amount1Min
	return inst
}

// SetUserAccount sets the "user" account.
func (inst *RemoveLiquidity) SetUserAccount(user ag_solanago.PublicKey) *RemoveLiquidity {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(user).SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *RemoveLiquidity) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetRouterAccount sets the "router" account.
func (inst *RemoveLiquidity) SetRouterAccount(router ag_solanago.PublicKey) *RemoveLiquidity {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(router)
	return inst
}

// GetRouterAccount gets the "router" account.
func (inst *RemoveLiquidity) GetRouterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetRouterAuthorityAccount sets the "routerAuthority" account.
func (inst *RemoveLiquidity) SetRouterAuthorityAccount(routerAuthority ag_solanago.PublicKey) *RemoveLiquidity {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(routerAuthority)
	return inst
}

// GetRouterAuthorityAccount gets the "routerAuthority" account.
func (inst *RemoveLiquidity) GetRouterAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserBalanceLiquidityAccount sets the "userBalanceLiquidity" account.
func (inst *RemoveLiquidity) SetUserBalanceLiquidityAccount(userBalanceLiquidity ag_solanago.PublicKey) *RemoveLiquidity {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(userBalanceLiquidity).WRITE()
	return inst
}

// GetUserBalanceLiquidityAccount gets the "userBalanceLiquidity" account.
func (inst *RemoveLiquidity) GetUserBalanceLiquidityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPoolProgramAccount sets the "poolProgram" account.
func (inst *RemoveLiquidity) SetPoolProgramAccount(poolProgram ag_solanago.PublicKey) *RemoveLiquidity {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(poolProgram)
	return inst
}

// GetPoolProgramAccount gets the "poolProgram" account.
func (inst *RemoveLiquidity) GetPoolProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPoolStateAccount sets the "poolState" account.
func (inst *RemoveLiquidity) SetPoolStateAccount(poolState ag_solanago.PublicKey) *RemoveLiquidity {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

// GetPoolStateAccount gets the "poolState" account.
func (inst *RemoveLiquidity) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPoolAuthorityAccount sets the "poolAuthority" account.
func (inst *RemoveLiquidity) SetPoolAuthorityAccount(poolAuthority ag_solanago.PublicKey) *RemoveLiquidity {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(poolAuthority)
	return inst
}

// GetPoolAuthorityAccount gets the "poolAuthority" account.
func (inst *RemoveLiquidity) GetPoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetPoolBalanceToken0Account sets the "poolBalanceToken0" account.
func (inst *RemoveLiquidity) SetPoolBalanceToken0Account(poolBalanceToken0 ag_solanago.PublicKey) *RemoveLiquidity {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(poolBalanceToken0).WRITE()
	return inst
}

// GetPoolBalanceToken0Account gets the "poolBalanceToken0" account.
func (inst *RemoveLiquidity) GetPoolBalanceToken0Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetPoolBalanceToken1Account sets the "poolBalanceToken1" account.
func (inst *RemoveLiquidity) SetPoolBalanceToken1Account(poolBalanceToken1 ag_solanago.PublicKey) *RemoveLiquidity {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(poolBalanceToken1).WRITE()
	return inst
}

// GetPoolBalanceToken1Account gets the "poolBalanceToken1" account.
func (inst *RemoveLiquidity) GetPoolBalanceToken1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetPoolMintLiquidityAccount sets the "poolMintLiquidity" account.
func (inst *RemoveLiquidity) SetPoolMintLiquidityAccount(poolMintLiquidity ag_solanago.PublicKey) *RemoveLiquidity {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(poolMintLiquidity).WRITE()
	return inst
}

// GetPoolMintLiquidityAccount gets the "poolMintLiquidity" account.
func (inst *RemoveLiquidity) GetPoolMintLiquidityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetPoolBalanceLiquidityAccount sets the "poolBalanceLiquidity" account.
func (inst *RemoveLiquidity) SetPoolBalanceLiquidityAccount(poolBalanceLiquidity ag_solanago.PublicKey) *RemoveLiquidity {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(poolBalanceLiquidity).WRITE()
	return inst
}

// GetPoolBalanceLiquidityAccount gets the "poolBalanceLiquidity" account.
func (inst *RemoveLiquidity) GetPoolBalanceLiquidityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetUserBalanceToken0Account sets the "userBalanceToken0" account.
func (inst *RemoveLiquidity) SetUserBalanceToken0Account(userBalanceToken0 ag_solanago.PublicKey) *RemoveLiquidity {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(userBalanceToken0).WRITE()
	return inst
}

// GetUserBalanceToken0Account gets the "userBalanceToken0" account.
func (inst *RemoveLiquidity) GetUserBalanceToken0Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetUserBalanceToken1Account sets the "userBalanceToken1" account.
func (inst *RemoveLiquidity) SetUserBalanceToken1Account(userBalanceToken1 ag_solanago.PublicKey) *RemoveLiquidity {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(userBalanceToken1).WRITE()
	return inst
}

// GetUserBalanceToken1Account gets the "userBalanceToken1" account.
func (inst *RemoveLiquidity) GetUserBalanceToken1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetFactoryStateAccount sets the "factoryState" account.
func (inst *RemoveLiquidity) SetFactoryStateAccount(factoryState ag_solanago.PublicKey) *RemoveLiquidity {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(factoryState)
	return inst
}

// GetFactoryStateAccount gets the "factoryState" account.
func (inst *RemoveLiquidity) GetFactoryStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetFactoryBalanceFeeToAccount sets the "factoryBalanceFeeTo" account.
func (inst *RemoveLiquidity) SetFactoryBalanceFeeToAccount(factoryBalanceFeeTo ag_solanago.PublicKey) *RemoveLiquidity {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(factoryBalanceFeeTo).WRITE()
	return inst
}

// GetFactoryBalanceFeeToAccount gets the "factoryBalanceFeeTo" account.
func (inst *RemoveLiquidity) GetFactoryBalanceFeeToAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetSystemTokenProgramAccount sets the "systemTokenProgram" account.
func (inst *RemoveLiquidity) SetSystemTokenProgramAccount(systemTokenProgram ag_solanago.PublicKey) *RemoveLiquidity {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(systemTokenProgram)
	return inst
}

// GetSystemTokenProgramAccount gets the "systemTokenProgram" account.
func (inst *RemoveLiquidity) GetSystemTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

func (inst RemoveLiquidity) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_RemoveLiquidity,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RemoveLiquidity) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RemoveLiquidity) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Liquidity == nil {
			return errors.New("Liquidity parameter is not set")
		}
		if inst.Amount0Min == nil {
			return errors.New("Amount0Min parameter is not set")
		}
		if inst.Amount1Min == nil {
			return errors.New("Amount1Min parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Router is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.RouterAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UserBalanceLiquidity is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.PoolProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.PoolAuthority is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.PoolBalanceToken0 is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.PoolBalanceToken1 is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.PoolMintLiquidity is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.PoolBalanceLiquidity is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.UserBalanceToken0 is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.UserBalanceToken1 is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.FactoryState is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.FactoryBalanceFeeTo is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.SystemTokenProgram is not set")
		}
	}
	return nil
}

func (inst *RemoveLiquidity) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RemoveLiquidity")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" Liquidity", *inst.Liquidity))
						paramsBranch.Child(ag_format.Param("Amount0Min", *inst.Amount0Min))
						paramsBranch.Child(ag_format.Param("Amount1Min", *inst.Amount1Min))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=16]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                user", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              router", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     routerAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("userBalanceLiquidity", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         poolProgram", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("           poolState", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("       poolAuthority", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("   poolBalanceToken0", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("   poolBalanceToken1", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("   poolMintLiquidity", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("poolBalanceLiquidity", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("   userBalanceToken0", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("   userBalanceToken1", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("        factoryState", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta(" factoryBalanceFeeTo", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("  systemTokenProgram", inst.AccountMetaSlice.Get(15)))
					})
				})
		})
}

func (obj RemoveLiquidity) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `Amount0Min` param:
	err = encoder.Encode(obj.Amount0Min)
	if err != nil {
		return err
	}
	// Serialize `Amount1Min` param:
	err = encoder.Encode(obj.Amount1Min)
	if err != nil {
		return err
	}
	return nil
}
func (obj *RemoveLiquidity) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `Amount0Min`:
	err = decoder.Decode(&obj.Amount0Min)
	if err != nil {
		return err
	}
	// Deserialize `Amount1Min`:
	err = decoder.Decode(&obj.Amount1Min)
	if err != nil {
		return err
	}
	return nil
}

// NewRemoveLiquidityInstruction declares a new RemoveLiquidity instruction with the provided parameters and accounts.
func NewRemoveLiquidityInstruction(
	// Parameters:
	liquidity ag_binary.Uint128,
	amount0Min ag_binary.Uint128,
	amount1Min ag_binary.Uint128,
	// Accounts:
	user ag_solanago.PublicKey,
	router ag_solanago.PublicKey,
	routerAuthority ag_solanago.PublicKey,
	userBalanceLiquidity ag_solanago.PublicKey,
	poolProgram ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	poolAuthority ag_solanago.PublicKey,
	poolBalanceToken0 ag_solanago.PublicKey,
	poolBalanceToken1 ag_solanago.PublicKey,
	poolMintLiquidity ag_solanago.PublicKey,
	poolBalanceLiquidity ag_solanago.PublicKey,
	userBalanceToken0 ag_solanago.PublicKey,
	userBalanceToken1 ag_solanago.PublicKey,
	factoryState ag_solanago.PublicKey,
	factoryBalanceFeeTo ag_solanago.PublicKey,
	systemTokenProgram ag_solanago.PublicKey) *RemoveLiquidity {
	return NewRemoveLiquidityInstructionBuilder().
		SetLiquidity(liquidity).
		SetAmount0Min(amount0Min).
		SetAmount1Min(amount1Min).
		SetUserAccount(user).
		SetRouterAccount(router).
		SetRouterAuthorityAccount(routerAuthority).
		SetUserBalanceLiquidityAccount(userBalanceLiquidity).
		SetPoolProgramAccount(poolProgram).
		SetPoolStateAccount(poolState).
		SetPoolAuthorityAccount(poolAuthority).
		SetPoolBalanceToken0Account(poolBalanceToken0).
		SetPoolBalanceToken1Account(poolBalanceToken1).
		SetPoolMintLiquidityAccount(poolMintLiquidity).
		SetPoolBalanceLiquidityAccount(poolBalanceLiquidity).
		SetUserBalanceToken0Account(userBalanceToken0).
		SetUserBalanceToken1Account(userBalanceToken1).
		SetFactoryStateAccount(factoryState).
		SetFactoryBalanceFeeToAccount(factoryBalanceFeeTo).
		SetSystemTokenProgramAccount(systemTokenProgram)
}
